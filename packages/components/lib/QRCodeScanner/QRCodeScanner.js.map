{"version":3,"sources":["../../src/QRCodeScanner/QRCodeScanner.js"],"names":["QRCodeScanner","state","hasCameraPermission","scanned","errorMessage","_getPermissionsAsync","Permissions","askAsync","CAMERA","status","setState","_handleBarCodeScanned","type","data","alert","props","onBarCodeScanned","Platform","OS","Constants","isDevice","flex","flexDirection","justifyContent","undefined","StyleSheet","absoluteFillObject","Component"],"mappings":"uzBAAA,qDACA,yCACA,qEACA,qEAEA,wD,gIAEaA,CAAAA,a,kcACXC,K,CAAQ,CACNC,mBAAmB,CAAE,IADf,CAENC,OAAO,CAAE,KAFH,CAGNC,YAAY,CAAE,IAHR,C,OAiBRC,oB,CAAuB,uMACIC,WAAW,CAACC,QAAZ,CAAqBD,WAAW,CAACE,MAAjC,CADJ,4BACbC,MADa,MACbA,MADa,CAErB,GAAIA,MAAM,GAAK,SAAf,CAA0B,CACxB,MAAKC,QAAL,CAAc,CACZN,YAAY,CAAE,0CADF,CAEZF,mBAAmB,CAAEO,MAAM,GAAK,SAFpB,CAAd,EAID,CALD,IAKO,CACL,MAAKC,QAAL,CAAc,CAAER,mBAAmB,CAAEO,MAAM,GAAK,SAAlC,CAAd,EACD,CAToB,8C,OAYvBE,qB,CAAwB,eAAoB,IAAjBC,CAAAA,IAAiB,OAAjBA,IAAiB,CAAXC,IAAW,OAAXA,IAAW,CAC1C,MAAKH,QAAL,CAAc,CAAEP,OAAO,CAAE,IAAX,CAAd,EACAW,KAAK,uBAAuBF,IAAvB,cAAwCC,IAAxC,sBAAL,CACA,MAAKE,KAAL,CAAWC,gBAAX,EAA+B,MAAKD,KAAL,CAAWC,gBAAX,CAA4BH,IAA5B,CAA/B,CACD,C,mPA1BC,GAAII,sBAASC,EAAT,GAAgB,SAAhB,EAA6B,CAACC,uBAAUC,QAA5C,CAAsD,CACpD,KAAKV,QAAL,CAAc,CACZN,YAAY,CACV,mFAFU,CAAd,EAID,CALD,IAKO,CACL,KAAKC,oBAAL,GACD,C,gGAqBM,iCACkC,KAAKJ,KADvC,CACCC,mBADD,aACCA,mBADD,CACsBC,OADtB,aACsBA,OADtB,CAGP,GAAID,mBAAmB,GAAK,IAA5B,CAAkC,CAChC,MACE,8BAAC,iBAAD,kDACE,6BAAC,iBAAD,qFADF,CADF,CAKD,CACD,GAAIA,mBAAmB,GAAK,KAA5B,CAAmC,CACjC,MACE,8BAAC,iBAAD,kDACE,6BAAC,iBAAD,wEADF,CADF,CAKD,CACD,MACE,8BAAC,iBAAD,EACE,KAAK,CAAE,CACLmB,IAAI,CAAE,CADD,CAELC,aAAa,CAAE,QAFV,CAGLC,cAAc,CAAE,UAHX,CADT,iDAME,6BAAC,kCAAD,EACE,gBAAgB,CAAEpB,OAAO,CAAGqB,SAAH,CAAe,KAAKb,qBAD/C,CAEE,KAAK,CAAEc,wBAAWC,kBAFpB,iDANF,CAWGvB,OAAO,EACN,6BAAC,mBAAD,EACE,KAAK,CAAC,SADR,CAEE,KAAK,CAAE,mBAFT,CAGE,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACO,QAAL,CAAc,CAAEP,OAAO,CAAE,KAAX,CAAd,CAAN,EAHX,iDAZJ,CADF,CAqBD,C,2BA1EgCwB,gB,mDA6EpB3B,a","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, StyleSheet, Button, Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport * as Permissions from 'expo-permissions';\n\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nexport class QRCodeScanner extends Component {\n  state = {\n    hasCameraPermission: null,\n    scanned: false,\n    errorMessage: null,\n  };\n\n  async componentDidMount() {\n    if (Platform.OS === 'android' && !Constants.isDevice) {\n      this.setState({\n        errorMessage:\n          'Oops, this will not work on Sketch in an Android emulator. Try it on your device!',\n      });\n    } else {\n      this._getPermissionsAsync();\n    }\n  }\n\n  _getPermissionsAsync = async () => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\n    if (status !== 'granted') {\n      this.setState({\n        errorMessage: 'Permission to access location was denied',\n        hasCameraPermission: status === 'granted',\n      });\n    } else {\n      this.setState({ hasCameraPermission: status === 'granted' });\n    }\n  };\n\n  _handleBarCodeScanned = ({ type, data }) => {\n    this.setState({ scanned: true });\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    this.props.onBarCodeScanned && this.props.onBarCodeScanned(data);\n  };\n\n  render() {\n    const { hasCameraPermission, scanned } = this.state;\n\n    if (hasCameraPermission === null) {\n      return (\n        <View>\n          <Text>Requesting for camera permission</Text>\n        </View>\n      );\n    }\n    if (hasCameraPermission === false) {\n      return (\n        <View>\n          <Text>No access to camera</Text>\n        </View>\n      );\n    }\n    return (\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'flex-end',\n        }}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : this._handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n\n        {scanned && (\n          <Button\n            color=\"#57c75e\"\n            title={'Tap to Scan Again'}\n            onPress={() => this.setState({ scanned: false })}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nexport default QRCodeScanner;\n"],"file":"QRCodeScanner.js"}